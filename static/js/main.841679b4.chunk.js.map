{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","className","type","name","id","placeholder","Weather","data","error","city","country","temperature","humidity","description","App","e","a","preventDefault","target","elements","value","fetch","api","json","console","log","cod","setState","Math","round","main","temp","sys","weather","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8NA6BeA,MA3Bf,SAAcC,GACZ,OACE,0BAAMC,SAAUD,EAAME,WAAYC,UAAU,yBAC1C,yBAAKA,UAAU,oBACb,2BACEA,UAAU,gBACVC,KAAK,OACLC,KAAK,OACLC,GAAG,OACHC,YAAY,WAGhB,yBAAKJ,UAAU,oBACb,2BACEC,KAAK,OACLC,KAAK,UACLC,GAAG,UACHH,UAAU,qBACVI,YAAY,aAGhB,yBAAKJ,UAAU,mBACb,4BAAQA,UAAU,yBAAlB,kBCaOK,EAnCC,SAACR,GACf,OACE,oCACGA,EAAMS,KAAKC,OACV,wBAAIP,UAAU,gDACXH,EAAMS,KAAKC,OAGhB,wBAAIP,UAAU,0CACXH,EAAMS,KAAKE,MACV,wBAAIR,UAAU,0BACXH,EAAMS,KAAKE,KADd,MACuBX,EAAMS,KAAKG,SAGnCZ,EAAMS,KAAKI,aACV,wBAAIV,UAAU,oBACZ,+CADF,MACkCH,EAAMS,KAAKI,YAD7C,UAIDb,EAAMS,KAAKK,UACV,wBAAIX,UAAU,oBACX,IACD,4CAFF,MAE+BH,EAAMS,KAAKK,UAG3Cd,EAAMS,KAAKM,aACV,wBAAIZ,UAAU,oBACX,IACD,+CAFF,MAEkCH,EAAMS,KAAKM,gBCmCxCC,G,wDA3Db,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAWRE,WAZmB,uCAYN,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIR,EAAOM,EAAEG,OAAOC,SAASV,KAAKW,MAC9BV,EAAUK,EAAEG,OAAOC,SAAST,QAAQU,MAH/B,SAIOC,MAAM,oDAAD,OAC+BZ,EAD/B,YACuCC,EADvC,kBAlBX,qCAcD,cAILY,EAJK,gBAOQA,EAAIC,OAPZ,OAOLhB,EAPK,OAQXiB,QAAQC,IAAIlB,GACRE,GAAQC,GAAwB,QAAbH,EAAKmB,IAC1B,EAAKC,SAAS,CACZpB,KAAM,CACJI,YAAaiB,KAAKC,MAAMtB,EAAKuB,KAAKC,KAAO,QACzCtB,KAAMF,EAAKJ,KACXO,QAASH,EAAKyB,IAAItB,QAClBE,SAAUL,EAAKuB,KAAKlB,SACpBC,YAAaN,EAAK0B,QAAQ,GAAGpB,YAC7BL,MAAO,MAIX,EAAKmB,SAAS,CACZpB,KAAM,CACJI,YAAa,GACbF,KAAM,GACNG,SAAU,GACVC,YAAa,GACbL,MAAO,gCA3BF,4CAZM,sDAEjB,EAAK0B,MAAQ,CACX3B,KAAM,CACJI,YAAa,GACbF,KAAM,GACNG,SAAU,GACVC,YAAa,GACbL,MAAO,KARM,E,qDA6CjB,OACE,yBAAKP,UAAU,2BACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,gCAAd,gBAEF,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAMD,WAAYmC,KAAKnC,aACvB,kBAAC,EAAD,CAASO,KAAM4B,KAAKD,MAAM3B,a,GArDlB6B,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLgB,QAAQhB,MAAMA,EAAM8C,a","file":"static/js/main.841679b4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Form(props) {\r\n  return (\r\n    <form onSubmit={props.getWeather} className=\" mt-3 col-10 col-sm-5\">\r\n      <div className=\" row form-group \">\r\n        <input\r\n          className=\"form-control \"\r\n          type=\"text\"\r\n          name=\"city\"\r\n          id=\"city\"\r\n          placeholder=\"City \"\r\n        />\r\n      </div>\r\n      <div className=\" row form-group \">\r\n        <input\r\n          type=\"text\"\r\n          name=\"country\"\r\n          id=\"country\"\r\n          className=\"form-control mt-2 \"\r\n          placeholder=\"Country\"\r\n        />\r\n      </div>\r\n      <div className=\"row form-group \">\r\n        <button className=\" btn btn-primary mt-2\">Get Weather</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n  return (\r\n    <>\r\n      {props.data.error && (\r\n        <h3 className=\"text-danger mt-3 col-10 col-sm-5 offset-sm-1\">\r\n          {props.data.error}\r\n        </h3>\r\n      )}\r\n      <ul className=\"list-group col-10 col-sm-5 offset-sm-1\">\r\n        {props.data.city && (\r\n          <li className=\"list-group-item active\">\r\n            {props.data.city} / {props.data.country}\r\n          </li>\r\n        )}\r\n        {props.data.temperature && (\r\n          <li className=\"list-group-item \">\r\n            <strong>Temperature</strong> : {props.data.temperature} Â°C\r\n          </li>\r\n        )}\r\n        {props.data.humidity && (\r\n          <li className=\"list-group-item \">\r\n            {\" \"}\r\n            <strong>Humidity</strong> : {props.data.humidity}\r\n          </li>\r\n        )}\r\n        {props.data.description && (\r\n          <li className=\"list-group-item \">\r\n            {\" \"}\r\n            <strong>Description</strong> : {props.data.description}\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\nexport default Weather;\r\n","import React, { Component } from \"react\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport \"./App.css\";\nconst API_KEY = \"9052b95ed2a71ca5fdbbeb999a0a7f4f\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {\n        temperature: \"\",\n        city: \"\",\n        humidity: \"\",\n        description: \"\",\n        error: \"\",\n      },\n    };\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\n    );\n    const data = await api.json();\n    console.log(data);\n    if (city && country && data.cod !== \"404\") {\n      this.setState({\n        data: {\n          temperature: Math.round(data.main.temp - 273.15),\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\",\n        },\n      });\n    } else {\n      this.setState({\n        data: {\n          temperature: \"\",\n          city: \"\",\n          humidity: \"\",\n          description: \"\",\n          error: \"Please Enter a valide data\",\n        },\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"container mt-5 offset-1\">\n        <div className=\"row\">\n          <h2 className=\"col-12 offset-1 text-primary\">Weather App</h2>\n        </div>\n        <div className=\"row \">\n          <Form getWeather={this.getWeather} />\n          <Weather data={this.state.data} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}